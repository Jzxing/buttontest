
keytest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e94  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002058  08002058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002058  08002058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002058  08002058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003fbc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e44  00000000  00000000  00023ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e0  00000000  00000000  00024e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000358  00000000  00000000  00025220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e207  00000000  00000000  00025578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bcd  00000000  00000000  0004377f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6c07  00000000  00000000  0004934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fff53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000da0  00000000  00000000  000fffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002010 	.word	0x08002010

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002010 	.word	0x08002010

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 f989 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f897 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8d1 	bl	8000388 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef gp;
  gp.Pin = GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_11;
 80001e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80001ea:	60bb      	str	r3, [r7, #8]
  gp.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
  gp.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &gp);
 80001f4:	f107 0308 	add.w	r3, r7, #8
 80001f8:	4619      	mov	r1, r3
 80001fa:	4842      	ldr	r0, [pc, #264]	; (8000304 <main+0x130>)
 80001fc:	f000 fae8 	bl	80007d0 <HAL_GPIO_Init>

  gp.Pin = GPIO_PIN_6;
 8000200:	2340      	movs	r3, #64	; 0x40
 8000202:	60bb      	str	r3, [r7, #8]
  gp.Mode = GPIO_MODE_INPUT;//input mode
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  gp.Pull = GPIO_NOPULL;//浮空
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800020c:	4b3e      	ldr	r3, [pc, #248]	; (8000308 <main+0x134>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a3d      	ldr	r2, [pc, #244]	; (8000308 <main+0x134>)
 8000212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000216:	6153      	str	r3, [r2, #20]
 8000218:	4b3b      	ldr	r3, [pc, #236]	; (8000308 <main+0x134>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_Init(GPIOE, &gp);
 8000224:	f107 0308 	add.w	r3, r7, #8
 8000228:	4619      	mov	r1, r3
 800022a:	4836      	ldr	r0, [pc, #216]	; (8000304 <main+0x130>)
 800022c:	f000 fad0 	bl	80007d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000236:	4833      	ldr	r0, [pc, #204]	; (8000304 <main+0x130>)
 8000238:	f000 fc6c 	bl	8000b14 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //key未按下的情况，为高电平1
  unsigned int index = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24
  unsigned int keyval = 1;
 8000240:	2301      	movs	r3, #1
 8000242:	623b      	str	r3, [r7, #32]
  unsigned int newkeyval = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	61fb      	str	r3, [r7, #28]
  //按照自己的思路来就行了

  while (1)
  {
	  newkeyval = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET ? 1 : 0;
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	482e      	ldr	r0, [pc, #184]	; (8000304 <main+0x130>)
 800024c:	f000 fc4a 	bl	8000ae4 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	bf0c      	ite	eq
 8000256:	2301      	moveq	r3, #1
 8000258:	2300      	movne	r3, #0
 800025a:	b2db      	uxtb	r3, r3
 800025c:	61fb      	str	r3, [r7, #28]
	  if(newkeyval == 0){
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <main+0x126>
		  HAL_Delay(20);
 8000264:	2014      	movs	r0, #20
 8000266:	f000 f9a9 	bl	80005bc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == 0);
 800026a:	bf00      	nop
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	4825      	ldr	r0, [pc, #148]	; (8000304 <main+0x130>)
 8000270:	f000 fc38 	bl	8000ae4 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f8      	beq.n	800026c <main+0x98>
		  HAL_Delay(20);
 800027a:	2014      	movs	r0, #20
 800027c:	f000 f99e 	bl	80005bc <HAL_Delay>
		  switch(index % 3){
 8000280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000282:	4b22      	ldr	r3, [pc, #136]	; (800030c <main+0x138>)
 8000284:	fba3 2301 	umull	r2, r3, r3, r1
 8000288:	085b      	lsrs	r3, r3, #1
 800028a:	461a      	mov	r2, r3
 800028c:	0052      	lsls	r2, r2, #1
 800028e:	441a      	add	r2, r3
 8000290:	1a8b      	subs	r3, r1, r2
 8000292:	2b02      	cmp	r3, #2
 8000294:	d020      	beq.n	80002d8 <main+0x104>
 8000296:	2b02      	cmp	r3, #2
 8000298:	d82b      	bhi.n	80002f2 <main+0x11e>
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <main+0xd0>
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d00d      	beq.n	80002be <main+0xea>
		  	  	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
		  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10 | GPIO_PIN_8, GPIO_PIN_SET);
		  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,  GPIO_PIN_RESET);
		  	  	break;
		  	  default:
		  	  	break;
 80002a2:	e026      	b.n	80002f2 <main+0x11e>
		  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80002aa:	4816      	ldr	r0, [pc, #88]	; (8000304 <main+0x130>)
 80002ac:	f000 fc32 	bl	8000b14 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,  GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	4813      	ldr	r0, [pc, #76]	; (8000304 <main+0x130>)
 80002b8:	f000 fc2c 	bl	8000b14 <HAL_GPIO_WritePin>
		  	  	break;
 80002bc:	e01a      	b.n	80002f4 <main+0x120>
		  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80002c4:	480f      	ldr	r0, [pc, #60]	; (8000304 <main+0x130>)
 80002c6:	f000 fc25 	bl	8000b14 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,  GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <main+0x130>)
 80002d2:	f000 fc1f 	bl	8000b14 <HAL_GPIO_WritePin>
		  	  	break;
 80002d6:	e00d      	b.n	80002f4 <main+0x120>
		  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10 | GPIO_PIN_8, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <main+0x130>)
 80002e0:	f000 fc18 	bl	8000b14 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,  GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <main+0x130>)
 80002ec:	f000 fc12 	bl	8000b14 <HAL_GPIO_WritePin>
		  	  	break;
 80002f0:	e000      	b.n	80002f4 <main+0x120>
		  	  	break;
 80002f2:	bf00      	nop
		  	  }
		  index++;
 80002f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f6:	3301      	adds	r3, #1
 80002f8:	627b      	str	r3, [r7, #36]	; 0x24

	  }
	  HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f95e 	bl	80005bc <HAL_Delay>
	  newkeyval = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) == GPIO_PIN_SET ? 1 : 0;
 8000300:	e7a2      	b.n	8000248 <main+0x74>
 8000302:	bf00      	nop
 8000304:	48001000 	.word	0x48001000
 8000308:	40021000 	.word	0x40021000
 800030c:	aaaaaaab 	.word	0xaaaaaaab

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fe6e 	bl	8002000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	2310      	movs	r3, #16
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033e:	2300      	movs	r3, #0
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fbfc 	bl	8000b44 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000352:	f000 f83d 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fc3c 	bl	8001bec <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037a:	f000 f829 	bl	80003d0 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x44>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <MX_GPIO_Init+0x44>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_GPIO_Init+0x44>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_GPIO_Init+0x44>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a08      	ldr	r2, [pc, #32]	; (80003cc <MX_GPIO_Init+0x44>)
 80003ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_GPIO_Init+0x44>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>
	...

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_MspInit+0x44>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <HAL_MspInit+0x44>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <HAL_MspInit+0x44>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <HAL_MspInit+0x44>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_MspInit+0x44>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <NMI_Handler+0x4>

0800042a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <HardFault_Handler+0x4>

08000430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <MemManage_Handler+0x4>

08000436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043a:	e7fe      	b.n	800043a <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <UsageFault_Handler+0x4>

08000442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000470:	f000 f884 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <SystemInit+0x20>)
 800047e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <SystemInit+0x20>)
 8000484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800049c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490e      	ldr	r1, [pc, #56]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0b      	ldr	r4, [pc, #44]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004c6:	f7ff ffd7 	bl	8000478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ca:	f001 fd75 	bl	8001fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ce:	f7ff fe81 	bl	80001d4 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004e0:	08002060 	.word	0x08002060
  ldr r2, =_sbss
 80004e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004e8:	2000002c 	.word	0x2000002c

080004ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_2_IRQHandler>
	...

080004f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x28>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x28>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f931 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f7ff ff66 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000

0800051c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f93b 	bl	80007b6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f911 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_Delay+0x44>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff8e 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff47 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff5c 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff8e 	bl	80006bc <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5d 	bl	8000668 <__NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffb0 	bl	8000724 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e160      	b.n	8000aa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 8152 	beq.w	8000a9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d005      	beq.n	8000810 <HAL_GPIO_Init+0x40>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b02      	cmp	r3, #2
 800080e:	d130      	bne.n	8000872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000846:	2201      	movs	r2, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	f003 0201 	and.w	r2, r3, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	2b03      	cmp	r3, #3
 800087c:	d017      	beq.n	80008ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0303 	and.w	r3, r3, #3
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d123      	bne.n	8000902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	6939      	ldr	r1, [r7, #16]
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0203 	and.w	r2, r3, #3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80ac 	beq.w	8000a9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095c:	4a59      	ldr	r2, [pc, #356]	; (8000ac4 <HAL_GPIO_Init+0x2f4>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000986:	d025      	beq.n	80009d4 <HAL_GPIO_Init+0x204>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <HAL_GPIO_Init+0x2f8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d01f      	beq.n	80009d0 <HAL_GPIO_Init+0x200>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4e      	ldr	r2, [pc, #312]	; (8000acc <HAL_GPIO_Init+0x2fc>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d019      	beq.n	80009cc <HAL_GPIO_Init+0x1fc>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4d      	ldr	r2, [pc, #308]	; (8000ad0 <HAL_GPIO_Init+0x300>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d013      	beq.n	80009c8 <HAL_GPIO_Init+0x1f8>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x304>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d00d      	beq.n	80009c4 <HAL_GPIO_Init+0x1f4>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a4b      	ldr	r2, [pc, #300]	; (8000ad8 <HAL_GPIO_Init+0x308>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0x1f0>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a4a      	ldr	r2, [pc, #296]	; (8000adc <HAL_GPIO_Init+0x30c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d101      	bne.n	80009bc <HAL_GPIO_Init+0x1ec>
 80009b8:	2306      	movs	r3, #6
 80009ba:	e00c      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009bc:	2307      	movs	r3, #7
 80009be:	e00a      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c0:	2305      	movs	r3, #5
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c4:	2304      	movs	r3, #4
 80009c6:	e006      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c8:	2303      	movs	r3, #3
 80009ca:	e004      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009d4:	2300      	movs	r3, #0
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	f002 0203 	and.w	r2, r2, #3
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	4093      	lsls	r3, r2
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e6:	4937      	ldr	r1, [pc, #220]	; (8000ac4 <HAL_GPIO_Init+0x2f4>)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a42:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f ae97 	bne.w	80007e0 <HAL_GPIO_Init+0x10>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	48001000 	.word	0x48001000
 8000ad8:	48001400 	.word	0x48001400
 8000adc:	48001800 	.word	0x48001800
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f001 b83a 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 816f 	beq.w	8000e5e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b80:	4bb5      	ldr	r3, [pc, #724]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00c      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b8c:	4bb2      	ldr	r3, [pc, #712]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 030c 	and.w	r3, r3, #12
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d15c      	bne.n	8000c52 <HAL_RCC_OscConfig+0x10e>
 8000b98:	4baf      	ldr	r3, [pc, #700]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d155      	bne.n	8000c52 <HAL_RCC_OscConfig+0x10e>
 8000ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000baa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000bb2:	fa93 f3a3 	rbit	r3, r3
 8000bb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbe:	fab3 f383 	clz	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d102      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x94>
 8000bd2:	4ba1      	ldr	r3, [pc, #644]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	e015      	b.n	8000c04 <HAL_RCC_OscConfig+0xc0>
 8000bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bf4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c00:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c08:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c0c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c10:	fa92 f2a2 	rbit	r2, r2
 8000c14:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000c18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	f042 0220 	orr.w	r2, r2, #32
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 8111 	beq.w	8000e5c <HAL_RCC_OscConfig+0x318>
 8000c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8108 	bne.w	8000e5c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f000 bfc6 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c62:	d106      	bne.n	8000c72 <HAL_RCC_OscConfig+0x12e>
 8000c64:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a7b      	ldr	r2, [pc, #492]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e036      	b.n	8000ce0 <HAL_RCC_OscConfig+0x19c>
 8000c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10c      	bne.n	8000c9c <HAL_RCC_OscConfig+0x158>
 8000c82:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a74      	ldr	r2, [pc, #464]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b72      	ldr	r3, [pc, #456]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a71      	ldr	r2, [pc, #452]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e021      	b.n	8000ce0 <HAL_RCC_OscConfig+0x19c>
 8000c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x184>
 8000cae:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a69      	ldr	r2, [pc, #420]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_RCC_OscConfig+0x19c>
 8000cc8:	4b63      	ldr	r3, [pc, #396]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a62      	ldr	r2, [pc, #392]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b60      	ldr	r3, [pc, #384]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a5f      	ldr	r2, [pc, #380]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cde:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d059      	beq.n	8000da4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fc58 	bl	80005a4 <HAL_GetTick>
 8000cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	e00a      	b.n	8000d10 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fc53 	bl	80005a4 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d902      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f000 bf67 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 8000d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000d24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d102      	bne.n	8000d42 <HAL_RCC_OscConfig+0x1fe>
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0x22a>
 8000d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d72:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000d82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	f002 021f 	and.w	r2, r2, #31
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0ab      	beq.n	8000cfa <HAL_RCC_OscConfig+0x1b6>
 8000da2:	e05c      	b.n	8000e5e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fbfe 	bl	80005a4 <HAL_GetTick>
 8000da8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dac:	e00a      	b.n	8000dc4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fbf9 	bl	80005a4 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	; 0x64
 8000dbc:	d902      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f000 bf0d 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 8000dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000dd8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d102      	bne.n	8000df6 <HAL_RCC_OscConfig+0x2b2>
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	e015      	b.n	8000e22 <HAL_RCC_OscConfig+0x2de>
 8000df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e16:	fa93 f3a3 	rbit	r3, r3
 8000e1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_RCC_OscConfig+0x314>)
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e26:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e2e:	fa92 f2a2 	rbit	r2, r2
 8000e32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000e36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e3a:	fab2 f282 	clz	r2, r2
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	f042 0220 	orr.w	r2, r2, #32
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	f002 021f 	and.w	r2, r2, #31
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1ab      	bne.n	8000dae <HAL_RCC_OscConfig+0x26a>
 8000e56:	e002      	b.n	8000e5e <HAL_RCC_OscConfig+0x31a>
 8000e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 817f 	beq.w	8001172 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e74:	4ba7      	ldr	r3, [pc, #668]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e80:	4ba4      	ldr	r3, [pc, #656]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d173      	bne.n	8000f74 <HAL_RCC_OscConfig+0x430>
 8000e8c:	4ba1      	ldr	r3, [pc, #644]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e98:	d16c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x430>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000eac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <HAL_RCC_OscConfig+0x386>
 8000ec4:	4b93      	ldr	r3, [pc, #588]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	e013      	b.n	8000ef2 <HAL_RCC_OscConfig+0x3ae>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000edc:	2302      	movs	r3, #2
 8000ede:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ee2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000ef8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000efc:	fa92 f2a2 	rbit	r2, r2
 8000f00:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000f04:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f08:	fab2 f282 	clz	r2, r2
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	f042 0220 	orr.w	r2, r2, #32
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	f002 021f 	and.w	r2, r2, #31
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <HAL_RCC_OscConfig+0x3f6>
 8000f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d002      	beq.n	8000f3a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f000 be52 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3a:	4b76      	ldr	r3, [pc, #472]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	21f8      	movs	r1, #248	; 0xf8
 8000f50:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000f58:	fa91 f1a1 	rbit	r1, r1
 8000f5c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000f60:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f64:	fab1 f181 	clz	r1, r1
 8000f68:	b2c9      	uxtb	r1, r1
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	4969      	ldr	r1, [pc, #420]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	e0fe      	b.n	8001172 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8088 	beq.w	8001096 <HAL_RCC_OscConfig+0x552>
 8000f86:	2301      	movs	r3, #1
 8000f88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000f98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	fab3 f383 	clz	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff faf7 	bl	80005a4 <HAL_GetTick>
 8000fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff faf2 	bl	80005a4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d902      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f000 be06 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000fe4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <HAL_RCC_OscConfig+0x4be>
 8000ffc:	4b45      	ldr	r3, [pc, #276]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e013      	b.n	800102a <HAL_RCC_OscConfig+0x4e6>
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800101a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800101e:	fa93 f3a3 	rbit	r3, r3
 8001022:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2202      	movs	r2, #2
 800102c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001030:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001034:	fa92 f2a2 	rbit	r2, r2
 8001038:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800103c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	f042 0220 	orr.w	r2, r2, #32
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f002 021f 	and.w	r2, r2, #31
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0af      	beq.n	8000fbc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001068:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	21f8      	movs	r1, #248	; 0xf8
 8001072:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800107a:	fa91 f1a1 	rbit	r1, r1
 800107e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001082:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001086:	fab1 f181 	clz	r1, r1
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	408b      	lsls	r3, r1
 800108e:	4921      	ldr	r1, [pc, #132]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e06d      	b.n	8001172 <HAL_RCC_OscConfig+0x62e>
 8001096:	2301      	movs	r3, #1
 8001098:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80010a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	461a      	mov	r2, r3
 80010be:	2300      	movs	r3, #0
 80010c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fa6f 	bl	80005a4 <HAL_GetTick>
 80010c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	e00a      	b.n	80010e2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fa6a 	bl	80005a4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d902      	bls.n	80010e2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	f000 bd7e 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80010f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <HAL_RCC_OscConfig+0x5d4>
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <HAL_RCC_OscConfig+0x5d0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	e016      	b.n	8001140 <HAL_RCC_OscConfig+0x5fc>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001130:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800113c:	4bbf      	ldr	r3, [pc, #764]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2202      	movs	r2, #2
 8001142:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001146:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001152:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f042 0220 	orr.w	r2, r2, #32
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f002 021f 	and.w	r2, r2, #31
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ac      	bne.n	80010cc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001176:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8113 	beq.w	80013ae <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800118c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d07c      	beq.n	8001292 <HAL_RCC_OscConfig+0x74e>
 8001198:	2301      	movs	r3, #1
 800119a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80011aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <HAL_RCC_OscConfig+0x8fc>)
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	2301      	movs	r3, #1
 80011c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff f9ef 	bl	80005a4 <HAL_GetTick>
 80011c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff f9ea 	bl	80005a4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d902      	bls.n	80011e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	f000 bcfe 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011ec:	fa93 f2a3 	rbit	r2, r3
 80011f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001202:	2202      	movs	r2, #2
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800120a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fa93 f2a3 	rbit	r2, r3
 8001214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001226:	2202      	movs	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800122e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	fa93 f2a3 	rbit	r2, r3
 8001238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800123c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001240:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 8001244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800124e:	2102      	movs	r1, #2
 8001250:	6019      	str	r1, [r3, #0]
 8001252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fa93 f1a3 	rbit	r1, r3
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001268:	6019      	str	r1, [r3, #0]
  return result;
 800126a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800126e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d09d      	beq.n	80011cc <HAL_RCC_OscConfig+0x688>
 8001290:	e08d      	b.n	80013ae <HAL_RCC_OscConfig+0x86a>
 8001292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001296:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012b4:	601a      	str	r2, [r3, #0]
  return result;
 80012b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <HAL_RCC_OscConfig+0x8fc>)
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	461a      	mov	r2, r3
 80012d0:	2300      	movs	r3, #0
 80012d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff f966 	bl	80005a4 <HAL_GetTick>
 80012d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff f961 	bl	80005a4 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d902      	bls.n	80012f4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f000 bc75 	b.w	8001bde <HAL_RCC_OscConfig+0x109a>
 80012f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012fc:	2202      	movs	r2, #2
 80012fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001304:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fa93 f2a3 	rbit	r2, r3
 800130e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001312:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001320:	2202      	movs	r2, #2
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f2a3 	rbit	r2, r3
 8001332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001340:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001344:	2202      	movs	r2, #2
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800134c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	fa93 f2a3 	rbit	r2, r3
 8001356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800135e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 8001362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001368:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800136c:	2102      	movs	r1, #2
 800136e:	6019      	str	r1, [r3, #0]
 8001370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001374:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f1a3 	rbit	r1, r3
 800137e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001382:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001386:	6019      	str	r1, [r3, #0]
  return result;
 8001388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d197      	bne.n	80012de <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 81a5 	beq.w	800170e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_RCC_OscConfig+0x8f8>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x900>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d121      	bne.n	8001454 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x900>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x900>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141c:	f7ff f8c2 	bl	80005a4 <HAL_GetTick>
 8001420:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e010      	b.n	8001448 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff f8bd 	bl	80005a4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d908      	bls.n	8001448 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e3d1      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	10908120 	.word	0x10908120
 8001444:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b8d      	ldr	r3, [pc, #564]	; (8001680 <HAL_RCC_OscConfig+0xb3c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0e8      	beq.n	8001426 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001458:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x92e>
 8001464:	4b87      	ldr	r3, [pc, #540]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a86      	ldr	r2, [pc, #536]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e035      	b.n	80014de <HAL_RCC_OscConfig+0x99a>
 8001472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001476:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x958>
 8001482:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	e020      	b.n	80014de <HAL_RCC_OscConfig+0x99a>
 800149c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x982>
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a74      	ldr	r2, [pc, #464]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x99a>
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a6b      	ldr	r2, [pc, #428]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8081 	beq.w	80015f2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f858 	bl	80005a4 <HAL_GetTick>
 80014f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff f853 	bl	80005a4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e365      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 8001512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001516:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001522:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fa93 f2a3 	rbit	r2, r3
 800152c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001530:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001546:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	fa93 f2a3 	rbit	r2, r3
 8001550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001554:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001558:	601a      	str	r2, [r3, #0]
  return result;
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001562:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0xa3a>
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	e013      	b.n	80015a6 <HAL_RCC_OscConfig+0xa62>
 800157e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001582:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015ae:	2102      	movs	r1, #2
 80015b0:	6011      	str	r1, [r2, #0]
 80015b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	fa92 f1a2 	rbit	r1, r2
 80015c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015c4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80015c8:	6011      	str	r1, [r2, #0]
  return result;
 80015ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015ce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d084      	beq.n	80014fa <HAL_RCC_OscConfig+0x9b6>
 80015f0:	e083      	b.n	80016fa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7fe ffd7 	bl	80005a4 <HAL_GetTick>
 80015f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7fe ffd2 	bl	80005a4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e2e4      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 8001614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001618:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800161c:	2202      	movs	r2, #2
 800161e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001624:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001648:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fa93 f2a3 	rbit	r2, r3
 8001652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001656:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800165a:	601a      	str	r2, [r3, #0]
  return result;
 800165c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001660:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001664:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0xb44>
 800167a:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_RCC_OscConfig+0xb40>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	e017      	b.n	80016b0 <HAL_RCC_OscConfig+0xb6c>
 8001680:	40007000 	.word	0x40007000
 8001684:	40021000 	.word	0x40021000
 8001688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	4bb3      	ldr	r3, [pc, #716]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016b8:	2102      	movs	r1, #2
 80016ba:	6011      	str	r1, [r2, #0]
 80016bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	fa92 f1a2 	rbit	r1, r2
 80016ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016ce:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80016d2:	6011      	str	r1, [r2, #0]
  return result;
 80016d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80016d8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	fab2 f282 	clz	r2, r2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	f002 021f 	and.w	r2, r2, #31
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d180      	bne.n	80015fc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016fa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001702:	4b9e      	ldr	r3, [pc, #632]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a9d      	ldr	r2, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 8001708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 825e 	beq.w	8001bdc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b96      	ldr	r3, [pc, #600]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	f000 821f 	beq.w	8001b6c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 8170 	bne.w	8001a20 <HAL_RCC_OscConfig+0xedc>
 8001740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001744:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001760:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001764:	601a      	str	r2, [r3, #0]
  return result;
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800176e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800177a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	461a      	mov	r2, r3
 8001782:	2300      	movs	r3, #0
 8001784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7fe ff0d 	bl	80005a4 <HAL_GetTick>
 800178a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	e009      	b.n	80017a4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7fe ff08 	bl	80005a4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e21c      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017c8:	601a      	str	r2, [r3, #0]
  return result;
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0xcaa>
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e027      	b.n	800183e <HAL_RCC_OscConfig+0xcfa>
 80017ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80017f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001818:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001842:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001846:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800184a:	6011      	str	r1, [r2, #0]
 800184c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001850:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	fa92 f1a2 	rbit	r1, r2
 800185a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800185e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001862:	6011      	str	r1, [r2, #0]
  return result;
 8001864:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001868:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fab2 f282 	clz	r2, r2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f042 0220 	orr.w	r2, r2, #32
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f002 021f 	and.w	r2, r2, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d182      	bne.n	8001790 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	f023 020f 	bic.w	r2, r3, #15
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	4937      	ldr	r1, [pc, #220]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	492d      	ldr	r1, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018f0:	601a      	str	r2, [r3, #0]
  return result;
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001906:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	461a      	mov	r2, r3
 800190e:	2301      	movs	r3, #1
 8001910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7fe fe47 	bl	80005a4 <HAL_GetTick>
 8001916:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191a:	e009      	b.n	8001930 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7fe fe42 	bl	80005a4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e156      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001942:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001954:	601a      	str	r2, [r3, #0]
  return result;
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800195e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0xe3c>
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_RCC_OscConfig+0xe38>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e02a      	b.n	80019d0 <HAL_RCC_OscConfig+0xe8c>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b86      	ldr	r3, [pc, #536]	; (8001be8 <HAL_RCC_OscConfig+0x10a4>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019dc:	6011      	str	r1, [r2, #0]
 80019de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019e2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	fa92 f1a2 	rbit	r1, r2
 80019ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019f0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80019f4:	6011      	str	r1, [r2, #0]
  return result;
 80019f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019fa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f43f af7f 	beq.w	800191c <HAL_RCC_OscConfig+0xdd8>
 8001a1e:	e0dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x1098>
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a44:	601a      	str	r2, [r3, #0]
  return result;
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a4e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	2300      	movs	r3, #0
 8001a64:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7fe fd9d 	bl	80005a4 <HAL_GetTick>
 8001a6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	e009      	b.n	8001a84 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe fd98 	bl	80005a4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0ac      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
 8001a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aa8:	601a      	str	r2, [r3, #0]
  return result;
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0xf8a>
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x10a4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e027      	b.n	8001b1e <HAL_RCC_OscConfig+0xfda>
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <HAL_RCC_OscConfig+0x10a4>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b2a:	6011      	str	r1, [r2, #0]
 8001b2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	fa92 f1a2 	rbit	r1, r2
 8001b3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b3e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001b42:	6011      	str	r1, [r2, #0]
  return result;
 8001b44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b48:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	fab2 f282 	clz	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f042 0220 	orr.w	r2, r2, #32
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f002 021f 	and.w	r2, r2, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d182      	bne.n	8001a70 <HAL_RCC_OscConfig+0xf2c>
 8001b6a:	e037      	b.n	8001bdc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e02e      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_OscConfig+0x10a4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_RCC_OscConfig+0x10a4>)
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b94:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d117      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ba8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09e      	sub	sp, #120	; 0x78
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e162      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b8d      	ldr	r3, [pc, #564]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	498b      	ldr	r1, [pc, #556]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e14a      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	497f      	ldr	r1, [pc, #508]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80dc 	beq.w	8001e18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d13c      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xf6>
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d102      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xa6>
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	e00f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
 8001c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cba:	fa92 f2a2 	rbit	r2, r2
 8001cbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cc2:	fab2 f282 	clz	r2, r2
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f042 0220 	orr.w	r2, r2, #32
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f002 021f 	and.w	r2, r2, #31
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d17b      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0f3      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d13c      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x178>
 8001cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x128>
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_ClockConfig+0x148>
 8001d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	647b      	str	r3, [r7, #68]	; 0x44
 8001d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
 8001d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d30:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d13a      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b2      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
 8001d64:	2302      	movs	r3, #2
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e00d      	b.n	8001da8 <HAL_RCC_ClockConfig+0x1bc>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2202      	movs	r2, #2
 8001daa:	61ba      	str	r2, [r7, #24]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	fa92 f2a2 	rbit	r2, r2
 8001db2:	617a      	str	r2, [r7, #20]
  return result;
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	fab2 f282 	clz	r2, r2
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f042 0220 	orr.w	r2, r2, #32
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f002 021f 	and.w	r2, r2, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e079      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	491a      	ldr	r1, [pc, #104]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7fe fbdc 	bl	80005a4 <HAL_GetTick>
 8001dec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe fbd8 	bl	80005a4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e061      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_ClockConfig+0x260>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d214      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4906      	ldr	r1, [pc, #24]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_ClockConfig+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e040      	b.n	8001eca <HAL_RCC_ClockConfig+0x2de>
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4912      	ldr	r1, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e8e:	f000 f829 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4601      	mov	r1, r0
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9c:	22f0      	movs	r2, #240	; 0xf0
 8001e9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	fa92 f2a2 	rbit	r2, r2
 8001ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	fab2 f282 	clz	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	40d3      	lsrs	r3, r2
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x2ec>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_RCC_ClockConfig+0x2f0>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_ClockConfig+0x2f4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb2a 	bl	800051c <HAL_InitTick>
  
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3778      	adds	r7, #120	; 0x78
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08002028 	.word	0x08002028
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x36>
 8001f12:	e03f      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	e03f      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f24:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	fa92 f2a2 	rbit	r2, r2
 8001f2c:	607a      	str	r2, [r7, #4]
  return result;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	fab2 f282 	clz	r2, r2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	40d3      	lsrs	r3, r2
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	220f      	movs	r2, #15
 8001f48:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	fa92 f2a2 	rbit	r2, r2
 8001f50:	60fa      	str	r2, [r7, #12]
  return result;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	40d3      	lsrs	r3, r2
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7c:	e007      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	623b      	str	r3, [r7, #32]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f96:	623b      	str	r3, [r7, #32]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	372c      	adds	r7, #44	; 0x2c
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	08002038 	.word	0x08002038
 8001fb4:	08002048 	.word	0x08002048

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4d0d      	ldr	r5, [pc, #52]	; (8001ff0 <__libc_init_array+0x38>)
 8001fbc:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <__libc_init_array+0x3c>)
 8001fbe:	1b64      	subs	r4, r4, r5
 8001fc0:	10a4      	asrs	r4, r4, #2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	4d0b      	ldr	r5, [pc, #44]	; (8001ff8 <__libc_init_array+0x40>)
 8001fca:	4c0c      	ldr	r4, [pc, #48]	; (8001ffc <__libc_init_array+0x44>)
 8001fcc:	f000 f820 	bl	8002010 <_init>
 8001fd0:	1b64      	subs	r4, r4, r5
 8001fd2:	10a4      	asrs	r4, r4, #2
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	08002058 	.word	0x08002058
 8001ff4:	08002058 	.word	0x08002058
 8001ff8:	08002058 	.word	0x08002058
 8001ffc:	0800205c 	.word	0x0800205c

08002000 <memset>:
 8002000:	4402      	add	r2, r0
 8002002:	4603      	mov	r3, r0
 8002004:	4293      	cmp	r3, r2
 8002006:	d100      	bne.n	800200a <memset+0xa>
 8002008:	4770      	bx	lr
 800200a:	f803 1b01 	strb.w	r1, [r3], #1
 800200e:	e7f9      	b.n	8002004 <memset+0x4>

08002010 <_init>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	bf00      	nop
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr

0800201c <_fini>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr
